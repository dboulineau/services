#!/usr/bin/env perl

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2016 Software Assurance Marketplace

use 5.010;
use utf8;
use warnings;
use strict;
use FindBin;
use lib "$FindBin::Bin/../perl5";
use lib "$FindBin::Bin/lib";

use Carp qw(croak carp);
use ConfigReader::Simple;
use Data::Dumper qw(Dumper);
use Data::UUID;
use English '-no_match_vars';
use Getopt::Long qw/GetOptions/;
use Log::Log4perl::Level;
use Log::Log4perl;
use Pod::Usage qw/pod2usage/;

use SWAMP::Client::AgentClient qw(csaAgentStop configureClient listJobs);
use SWAMP::Client::LaunchPadClient qw(launchPadStart configureClient launchPadCreateID);
use SWAMP::SWAMPUtils qw(trim loadProperties getSwampConfig getLoggingConfigString);
use Storable qw(nstore_fd fd_retrieve);

my $help = 0;
my $man  = 0;
our $VERSION = '0.00';
my $bogFile;
my $debug = 0;
my $stop  = 0;
my $dolist = 0;
my $nRepeat = 1;
my $port;
my $port2;
my $host;
my $lastRun = 1;
my $configfile;

GetOptions(
    'bog=s'  => \$bogFile,
    'debug'  => \$debug,
    'config=s' => \$configfile,
    'list' => \$dolist,
    'host=s' => \$host,
    'post=s' => \$port,
    'post2=s' => \$port2,
    'n=i' => \$nRepeat,
    'stop'   => \$stop,
    'help|?' => \$help,
    'man'    => \$man,
) or pod2usage(2);

if ($help) { pod2usage(1); }
if ($man) { pod2usage( '-verbose' => 2 ); }

Log::Log4perl->init( getLoggingConfigString("${PROGRAM_NAME}.log") );
my $log = Log::Log4perl->get_logger(q{});
$log->level($debug ? $TRACE : $INFO);

if ( open( my $fd, '<', '.launchstate') ) {
    my $ref = fd_retrieve( \*{$fd} );
    $lastRun = $$ref;
    close($fd);
}

my $config = getSwampConfig($configfile);
if ( !defined($port) ) {
    $port = int( $config->get('agentMonitorPort') );
}
if ( !defined($port2) ) {
    $port2 = int( $config->get('agentMonitorJobPort') );
}
if ( !defined($host) ) {
    $host = $config->get('agentMonitorHost');
}

if ( defined($port2) && defined($host) ) {
    SWAMP::Client::AgentClient::configureClient( $host, $port2, $PROGRAM_NAME );
}
if ( defined($port) && defined($host) ) {
    SWAMP::Client::LaunchPadClient::configureClient( $host, $port, $PROGRAM_NAME );
}

if ($dolist) {
    my $res = listJobs();
    my $dump = Dumper($res);
    $log->debug($dump);
    exit 0;
}

my %bog;
loadProperties($bogFile, \%bog);

if ($stop) {
    my $res = csaAgentStop( \%bog );
    if ( ref($res) eq "HASH" && defined( $res->{'error'} ) ) {
        my $dump = Dumper($res);
        $log->debug($dump);
    }
}
else {
    srand($PID);
    for my $ii (1..$nRepeat) {
   #     my $res = launchPadCreateID();
   #     $bog{'execrunid'} = $res->{'execrunid'};
        $bog{'execrunid'} = createExecID($ii);
        launchPadStart( \%bog );
#        sleep(1+int(rand(2)));
    }
    $lastRun += $nRepeat;
    if ( open( my $fd, '>', '.launchstate' ) ) {
        nstore_fd \$lastRun,  \*{$fd};
        close($fd);
    }
}
sub createExecID {
    my $pos = shift;
    $pos += $lastRun;
    return "test.exec_${pos}";
    
}
sub logtag {
    return $PROGRAM_NAME;
}
sub logfilename {
    return "${PROGRAM_NAME}.log";
}

__END__
=pod

=encoding utf8

=head1 NAME


=head1 SYNOPSIS



=head1 DESCRIPTION

=head1 OPTIONS

=over 8

=item --man

Show manual page for this script

=back

=head1 EXAMPLES

=head1 SEE ALSO

=cut
