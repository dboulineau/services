#!/usr/bin/env perl 

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2016 Software Assurance Marketplace

#** @file swamp_monitor
#
# @brief This monitor launches and watches the SWAMP processes and restarts them as needed
# @author Dave Boulineau (db), dboulineau@continuousassurance.org
# @date 10/09/2013 15:31:33
#*

use 5.014;
use utf8;
use warnings;
use strict;
use FindBin qw($Bin);
use lib ( "$FindBin::Bin/../perl5", "$FindBin::Bin/lib" );
use sigtrap 'handler', \&trap_handler, 'normal-signals';
use sigtrap 'handler', \&hup_handler,  'HUP';

use Carp qw(carp croak);
use Cwd qw(abs_path getcwd);
use English '-no_match_vars';
use Fcntl qw(:flock);
use File::Basename qw(basename);
use File::Spec qw(devnull);
use Getopt::Long qw/GetOptions/;
use Log::Log4perl::Level;
use Log::Log4perl;
use POSIX qw(:sys_wait_h WNOHANG);    # for nonblocking read
use POSIX qw(setsid waitpid);
use Pod::Usage qw/pod2usage/;

use SWAMP::SWAMPUtils qw(
  loadProperties
  getBuildNumber
  getLoggingConfigString
  getSwampConfig
  start_process
  stop_process
  uname
);
my $help    = 0;
my $man     = 0;
my $debug   = 0;
my $testrun = 0;
my $config;
my $asdaemon = 0;

our $VERSION = '1.00';
my $basedir = abs_path("$FindBin::Bin/..");

## no critic (ProhibitCallsToUndeclaredSubs)
# Check for an instance of ourself
open my $self, '<', $PROGRAM_NAME or croak "Couldn't open self: $OS_ERROR";
flock $self, ( LOCK_EX | LOCK_NB ) or exit 0;
## use critic

GetOptions(
    'help|?'     => \$help,
    'debug'      => \$debug,
    'config|C=s' => \$config,
    'daemon'     => \$asdaemon,
    'testrun|T'  => \$testrun,
    'man'        => \$man,
) or pod2usage(2);

if ($help)               { pod2usage(1); }
if ($man)                { pod2usage( '-verbose' => 2 ); }
if ( !defined($config) ) { pod2usage('parameter --config is required'); }

my $startupdir = getcwd;

if ($asdaemon) {
    chdir(q{/});
    open( STDIN, '<', File::Spec->devnull )
      || croak "can't read /dev/null: $OS_ERROR";
    open( STDOUT, '>', File::Spec->devnull )
      || croak "can't write to /dev/null: $OS_ERROR";
    defined( my $pid = fork() ) || croak "can't fork: $OS_ERROR";
    exit if $pid;    # non-zero now means I am the parent
    ( setsid() != -1 ) || croak "Can't start a new session: $OS_ERROR";
    open( STDERR, ">&STDOUT" ) || carp "Can't open STDERR $OS_ERROR";
}

#** @var %children a map of child process ids indexed by the same alias
# name used with `%processes`
my %children;

#** @var %process a map of process command lines indexed by an alias name.
# Taken from the config file.
my %processes;
my %maxRetries;
my %maxFreq;
my %startTime;

chdir($startupdir);
Log::Log4perl->init( getLoggingConfigString() );

my $log = Log::Log4perl->get_logger(q{});
$log->level( $debug ? $TRACE : $INFO );
$log->remove_appender('Screen');

local $SIG{'CHLD'} = sub {

    # don't change $! and $? outside handler
    local $OS_ERROR    = $OS_ERROR;
    local $CHILD_ERROR = $CHILD_ERROR;
    my $pid = 1;
    while ( $pid > 0 ) {
        $pid = waitpid( -1, WNOHANG );
    }
};

sub hup_handler {
    $log->info("HUP: reread config file");
    reapChildren();
    initMonitor();
    initProcesses();
    return;
}

sub trap_handler {
    $log->info("Shutting down");
    reapChildren();
    $log->info("Done reaping");
    croak "Caught signal @_, shutting down";
}

$log->info("$PROGRAM_NAME: config file: $config");
my $ver = "$VERSION." . getBuildNumber();
$log->info("$PROGRAM_NAME: v$ver");

initMonitor();

initProcesses();
my $done = 0;
while ( !$done ) {
    my $slept = sleep 60;
    my $pid;
    foreach my $child ( keys %children ) {
        $pid = waitpid( $child, WNOHANG );
        if ( $pid == -1 ) {
            restart_child( $child, $CHILD_ERROR );
        }
    }
    if ($testrun && scalar keys (%children) == 0) {
        $log->info("No children left and this is a testrun, so exitting.");
        $done = 1;
    }
}
exit 0;

sub reapChildren {
    foreach my $child ( keys %children ) {
        my $ret = stop_process($child);
        $log->info("stopping [$child] $processes{$children{$child}} returned $ret");
        delete $children{$child};
    }
    return;
}
sub initProcesses {
    foreach my $proc ( keys %processes ) {
        $processes{$proc} =~ s/SWAMPDIR/$basedir/sxm;
        $processes{$proc} =~ s/WATCHERPID/--watcherpid $PID/sxm;
        my $childID = launchProcess( \%processes, \%children, $proc );
        $log->info("Started process $childID <$processes{$proc}>");
    }
    return;
}
sub initMonitor {
    my %configFile;
    if ( loadProperties( $config, \%configFile ) <= 0 ) {
        $log->info("No processes to watch. Exiting.");
        exit 0;
    }
    undef %processes;
    undef %maxRetries;
    undef %maxFreq;

    # Post process the config file mapping dotted subfields into distinct maps.
    # Default values for retries = 5, frequency=30s
    foreach my $key ( keys %configFile ) {
        if ( $key =~ /\.proc$/sxm ) {
            my $proc = $key;
            $proc =~ s/\.proc$//sxm;
            $processes{$proc} = $configFile{$key};
            if ( !defined( $maxRetries{$proc} ) ) {
                $maxRetries{$proc} = 5;
            }
            if ( !defined( $maxFreq{$proc} ) ) {
                $maxFreq{$proc} = 30;
            }
        }
        elsif ( $key =~ /\.maxfreq$/sxm ) {
            my $proc = $key;
            $proc =~ s/\.maxfreq$//sxm;
            $maxFreq{$proc} = $configFile{$key};
        }
        elsif ( $key =~ /\.maxretries$/sxm ) {
            my $proc = $key;
            $proc =~ s/\.maxretries$//sxm;
            $maxRetries{$proc} = $configFile{$key};
        }
    }

    return;
}

#my $idx = 0;
sub launchProcess {
    my $procmap  = shift;
    my $childmap = shift;
    my $key      = shift;
    my $childID  = start_process( $procmap->{$key} );
    $startTime{$key} = time;
    $childmap->{$childID} = $key;
    return $childID;
}

sub restart_child {
    my $pid  = shift;
    my $err  = shift;
    my $proc = $children{$pid};
    $log->info("$pid has died, <error:$err> restarting $proc [$processes{$proc}]");
    delete $children{$pid};

    # If the time since the last start of this process is less than the max startup frequency,
    # count this as a retry and decrement retry count.
    my $okToStart = 1;
    if ( abs( time - $startTime{$proc} ) < $maxFreq{$proc} ) {
        if ( $maxRetries{$proc} > 1 ) {
            $maxRetries{$proc}--;
        }
        else {
            $log->error("$pid has died too many times.");
            $okToStart = 0;
        }
    }
    if ($okToStart) {
        my $childID = launchProcess( \%processes, \%children, $proc );
        $log->info("$pid restarted as $childID $proc [$processes{$proc}]");
    }
    return;
}

sub logtag {
    ( my $name = $PROGRAM_NAME ) =~ s/\.pl//sxm;
    return basename($name);
}

sub logfilename {
    ( my $name = $PROGRAM_NAME ) =~ s/\.pl//sxm;
    $name = basename($name);
    return "$basedir/log/${name}.log";
}
__END__
=pod

=encoding utf8

=head1 NAME


=head1 SYNOPSIS



=head1 DESCRIPTION

=head1 OPTIONS

=over 8

=item --man

Show manual page for this script

=back

=head1 EXAMPLES

=head1 SEE ALSO

=cut


## Please see file perltidy.ERR
