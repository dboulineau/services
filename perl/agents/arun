#!/usr/bin/env perl 

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2016 Software Assurance Marketplace

#** @file arun.pl
#
# @brief This is the command-line interface to SWAMP Assessment Run job submission
# @author Dave Boulineau (db), dboulineau@continuousassurance.org
# @date 08/27/13 14:04:38
#*

use 5.010;
use utf8;
use warnings;
use strict;

use Getopt::Long qw/GetOptions/;
use Cwd qw(abs_path);
use Data::Dumper qw(Dumper);
use Pod::Usage qw/pod2usage/;
use English '-no_match_vars';
use File::Basename qw(basename);

#use IO::Interactive qw( is_interactive );
use Log::Log4perl::Level;
use Log::Log4perl;
use POSIX qw(strftime);
use Carp qw(carp croak);
use FindBin;
use lib "$FindBin::Bin/../perl5";
use lib "$FindBin::Bin/lib";

use SWAMP::Client::AgentClient qw(configureClient fetchRawResults);
use SWAMP::Client::LaunchPadClient qw(launchPadStart configureClient launchPadCreateID );
use SWAMP::HTCondorDefines;
use SWAMP::Client::GatorClient qw(listPlatforms listPackages listTools configureClient getBillOfGoods);
use SWAMP::SWAMPUtils qw(trim getSwampConfig getLoggingConfigString uname);
use SWAMP::AssessmentTools qw( createAssessConfigs);

my $help  = 0;
my $man   = 0;
my $debug = 0;
our $VERSION = '1.02';
my $basedir = abs_path("$FindBin::Bin/..");

my $listpackages  = 0;
my $listtools     = 0;
my $listplatforms = 0;
my $interactive   = 0;
my $genconfigs    = 0;
my $toolchain;
my $host;
my @tools;
my @packages;
my $platform  = 'rhel-6.4-64';
my $doversion = 0;
my $doWatch   = 0;
my $doCodeDX  = 0;
my $norun     = 0;
my $outfile;
my $testmode = 0;
my $verbose  = 0;
my $dump     = 0;
my $csv      = 0;

GetOptions(
    'dump'            => \$dump,
    'genconfigs'      => \$genconfigs,
    'listpackages|lp' => \$listpackages,
    'listtools|lt'    => \$listtools,
    'listplatforms'   => \$listplatforms,
    'package=s'       => \@packages,
    'out=s'           => \$outfile,
    'watch'           => \$doWatch,
    'verbose'         => \$verbose,
    'host=s'          => \$host,
    'interactive'     => \$interactive,
    'n'               => \$norun,
    'codedx!'         => \$doCodeDX,
    'csv'             => \$csv,
    'tool=s'          => \@tools,
    'toolchain=s'     => \$toolchain,
    'platform=s'      => \$platform,
    'testmode'        => \$testmode,
    'debug'           => \$debug,
    'V|version'       => \$doversion,
    'help|?'          => \$help,
    'man'             => \$man,
) or pod2usage(2);

if ($help) { pod2usage(1); }
if ($man) { pod2usage( '-verbose' => 2 ); }
Log::Log4perl->init( getLoggingConfigString() );
my $log = Log::Log4perl->get_logger(q{});
$log->level( $debug ? $TRACE : $INFO );

if ( !$debug ) {
    $log->remove_appender('Screen');
}
if ( configureClients($host) ) {
    if (
        checkUsage(
            'DUMP'          => $dump,
            'LISTPACKAGES'  => $listpackages,
            'LISTTOOLS'     => $listtools,
            'LISTPLATFORMS' => $listplatforms,
            'SHOWVERSION'   => $doversion,
            'PACKAGE'       => $#packages,
            'TOOL'          => $#tools,
        ) == 0
      )
    {
        exit 0;
    }
}
if ( defined($outfile) && ( $#tools > 0 || $#packages > 0 ) ) {
    carp "Cannot request results when specifying multiple aruns. Results will not be transferred.";
    undef $outfile;
}

my $toolref    = listTools();
my $packageref = listPackages();

#my $platref    = listPlatforms();

# We need to resolve any numeric tool or package before proceeding
#my $nItems = $toolref->{'rows'};
#my $nFound = 0;
#my $package;
#my $tool;
if ($genconfigs) {
    $norun = 1;
}

###normalizeTools($toolref);
normalizePackages();
my $platformIdx = $platform;
normalizePlatform( \$platform, listPlatforms() );

my $nRuns = ( 1 + $#tools ) * ( 1 + $#packages );
my %runids;      # Map of all the execrun id needed for this session
my %siblings;    # Map of all of the siblings for all of the runids
my @watchedIds;

makeRunIDs( \@packages, \@tools, \%runids );
prepSiblings( \@packages, \@tools );

my %bog;
foreach my $_tool (@tools) {
    foreach my $_package (@packages) {
        makeBOG( $_tool, $toolref, $_package, $packageref, $platform );

        if ($norun ) {
            if ($genconfigs) {
                createAssessConfigs(\%bog, '.');

            }
            else {
                dumpBog( \%bog, 1 );
            }
        }

        if ( !$norun ) {
            launchPadStart( \%bog );
            my $msg =
"Started assessment run for package <".basename($bog{'packagepath'})."> using tool $bog{'toolname'} on [$bog{'platform'}] with ID: $bog{'execrunid'}";
            print "$msg\n";
            $log->info(q{##START});
            $log->info($msg);
		dumpBog( \%bog, 0 );
            $log->info(q{##END});
        }
    }    # END LOOP over package
}    # END LOOP over tools

# No waiting or transferring for multiple tests.
if ( defined($outfile) || $doWatch ) {
    doWait();
    if ( defined($outfile) ) {

        print "Copying results.\n";
        my $results = fetchRawResults( $bog{'execrunid'} );
        if ( open( my $fh, '>', $outfile ) ) {
            binmode $fh;
            print $fh $results;
            if ( !close($fh) ) {
                $log->warn("Unable to close $outfile $OS_ERROR");
            }
        }
        else {
            $log->warn("Unable to open $outfile $OS_ERROR");
        }

        # Fetch results are store them in $outfile
        print "Results written to $outfile\n";
    }
}
exit 0;

sub prepSiblings {
    my $pkgref = shift;
    my $tref   = shift;
    foreach my $package ( @{$pkgref} ) {
        foreach my $tool ( @{$tref} ) {

      # Go through all of the keys in the runid map. Any key which has the same package is a sibling
            my @siblings;
            foreach my $key ( keys %runids ) {
                my ( $tmppkg, $tmptool ) = unmakeKey($key);    # split(/\,/sxm,$key);
                next if ( $key eq makeKey( $package, $tool ) );
                if ( $tmppkg eq $package ) {
                    push @siblings, $runids{$key};
                }
            }
            if ( $#siblings != -1 ) {
                $siblings{ makeKey( $package, $tool ) } = join( q{,}, @siblings );
            }
        }
    }
    return;
}

sub getFields {
    my $idx       = shift;
    my $resultref = shift;
    my @columns   = split( /\|/sxm, $resultref->{'0'} );

    # For CSA-467 Old database format
    # Package store:
    # build_cmd help 3 values, comma separated that belong in build_tool, build_file, build_tool
    # build_cmd is renamed build_target
    # deployment_cmd is renamed build_tool
    # build_output_path is renamed build_file
    # Tool Shed:
    # deployment_cmd is renamed tool_arguments
    # invocation_cmd is renamed tool_executable
    # tool_directory is new and contains what is currently in deployment_cmd
    my %fhash;
    @fhash{@columns} = ();
    my $isOldPackage = 0;
    my $isOldTool    = 0;
    if ( exists( $fhash{'build_output_path'} ) ) {
        $isOldPackage = 1;
    }
    if ( exists( $fhash{'tool_path'} ) && exists( $fhash{'invocation_cmd'} ) ) {
        $isOldTool = 1;
    }
    my $data = $resultref->{$idx};
    my @tabledata = split( /\|/sxm, $data );
    if ( $#tabledata != $#columns ) {
        for my $idx ( 0 .. $#tabledata ) {
            my $data = $resultref->{$idx};
            $data =~ s/%%/%NULL%/g;
            $log->error("[$idx] $data");
        }
        for my $idx ( 0 .. $#columns ) {
            $log->error("[$columns[$idx]]");
        }
        croak "Somehow the database table isn't rectangular at idx $idx: $#tabledata vs $#columns";
    }
    my %fields;
    for my $idx ( 0 .. $#columns ) {

        #column names are the key, data values are the values

        $fields{ $columns[$idx] } = $tabledata[$idx];
    }
    return \%fields;
}

sub doListTools {
    my $dumpAll = shift;
    my $tref = listTools();
    if ($dumpAll) {
        print Dumper($tref);
        return;
    }

    my $nItems = $tref->{'rows'};

    my %seen;
    printf "%4s %-20s %-10s\n", 'ID',  'Name', 'Version';
    printf "%4s %-20s %-10s\n", q{--}, '----', '-------';
    my $fmt="%4d %-20s %-10s %-10s\n";
    if ($csv) {
        $fmt="%d,%s,%s,%s\n";
    }
    foreach my $idx ( 1 .. $nItems ) {
        my $fields = getFields( $idx, $tref );
        my $key = "$fields->{'name'},$fields->{'version_string'}";
        if ( !defined( $seen{$key} ) ) {
            $seen{$key} = $idx;
            printf $fmt, $idx, $fields->{'name'}, $fields->{'version_string'}, basename($fields->{'tool_path'});
        }
    }
    return;
}

sub doListPlatforms {
    my $dumpAll = shift;
    my $platref = listPlatforms();
    my $nItems = $platref->{'rows'};

    if ($dumpAll) {

        foreach my $idx ( 1 .. $nItems) {
            print Dumper($platref->{$idx});
        }
        return;
    }


    my %seen;
    printf "%4s %-40s %-10s\n", 'ID',  'Name', 'Version';
    printf "%4s %-40s %-10s\n", q{--}, '----', '-------';
    foreach my $idx ( 1 .. $nItems ) {
        my $fields = getFields( $idx, $platref );
        my $key = "$fields->{'name'},$fields->{'version_string'}";
        if ( !defined( $seen{$key} ) ) {
            $seen{$key} = $idx;
            printf "%4d %-40s %-10s\n", $idx, $fields->{'name'}, $fields->{'platform_path'};
        }
    }
    return;
}

sub doListPackages {
    my $dumpAll = shift;
    my $packref = listPackages();
    my $nItems = $packref->{'rows'};
    if ($dumpAll) {
        my @columns   = split( /\|/sxm, $packref->{'0'} );
        foreach my $col (@columns) {
            print "$col ";
        }
        print "\n";
        foreach my $idx ( 1 .. $nItems) {
            my @data   = split( /\|/sxm, $packref->{$idx} );
            foreach my $dd (0 .. $#data) {
                if ($columns[$dd] eq 'checksum') {
                    $data[$dd] = '$CHECKSUM';
                }
                if ($columns[$dd] =~ /uuid/ && length($data[$dd]) > 4) {
                    $data[$dd] = substr($data[$dd], 0, 4);
                }   
                print "$data[$dd] ";
            }
            print "\n";
        }
        return;
    }


    #my $ff;
    #my $interactive = is_interactive();
    #$interactive = 0;    # This doesn't work under RHEL6
    #if ($interactive) {
    #my $pager = $ENV{'PAGER'} || "less";
    #open( $ff, "| $pager" ) or die "Cannot fork a pager $OS_ERROR";
    #select $ff;
    #}

    # Only show unique packages, if we've seen packagename.version before, ignore
    my %seen;
    if ($verbose) {
        foreach my $idx ( 0 .. $nItems ) {
            my $out = join( ';', split( /\|/, $packref->{$idx} ) );
            print "$out\n";
        }
        return;
    }
    printf "%4s %-30s %-10s %-10s\n", 'ID',  'Name', 'Version', 'Language';
    printf "%4s %-30s %-10s %-10s\n", q{--}, '----', '-------', '--------';
    my $fmt = "%4d %-30s %-10s [%-4s] [%-10s]\n";
    if ($csv) {
        $fmt = "%d,%s,%s,%s,%s\n";
    }
    foreach my $idx ( 1 .. $nItems ) {
        my $fields = getFields( $idx, $packref );
#	next if ($fields->{'version_sharing_status'} =~/private/i);
        my $key = "$fields->{'name'},$fields->{'version_string'}";
        if ( !defined( $seen{$key} ) ) {
            #$seen{$key} = $idx;
            printf $fmt, $idx, $fields->{'name'}, $fields->{'version_string'},
              $fields->{'package_type'}, basename($fields->{'package_path'});
        }
    }

    # if ($interactive) {
    #     close $ff;
    #     select STDOUT;
    # }
    return;
}

sub history {
    croak "This no longer works. Sorry.";
}

sub doWait {

    # Wait here for results and show progress as the job runs.
    my $done = 0;
    my %lastSaw;
    while ( $done <= $#watchedIds ) {
        foreach my $eid (@watchedIds) {
            my $hist = history($eid);
            if ( !defined( $lastSaw{$eid} ) ) {
                $lastSaw{$eid} = -1;
            }
            my $newest = -1;
            foreach my $etime ( sort keys %{$hist} ) {

                # Only show events newer than the last time we showed them
                if ( $etime > $lastSaw{$eid} ) {
                    my @events = keys %{ $hist->{$etime} };
                    foreach my $evt (@events) {
                        my $val     = $hist->{$etime}->{$evt};
                        my $timeStr = strftime "%D %H:%M:%S", localtime($etime);
                        my $prefix  = "$timeStr:";
                        if ( $#watchedIds > 0 ) {
                            $prefix .= " $eid:";
                        }
                        if ( $evt eq 'htcondorstatus' ) {
                            showStatus( $prefix, $val );
                        }
                        elsif ( $evt eq 'domainstate' ) {
                            showState( $prefix, $val );
                        }
                        elsif ( $evt eq 'removeclusterid' ) {
                            print "$prefix Assessment run finished.\n";
                            $done++;
                        }
                        elsif ( $evt eq 'launchpadstart' ) {
                            print "$prefix Assessment run started\n";
                        }
                        elsif ( $evt eq 'resultsprocessed' ) {
                            print "$prefix Results sent to CodeDX: $val\n";
                        }
                    }
                }
                $newest = $etime;
            }
            $lastSaw{$eid} = $newest;
            if ( $done <= $#watchedIds ) { sleep 5 }
        }
    }

    return;
}

sub showState {
    my ( $prefix, $val ) = @_;
    if ( $val eq 'defined' ) {
        print "$prefix Virtual machine defined.\n";
    }
    elsif ( $val eq 'started' ) {
        print "$prefix Virtual machine running.\n";
    }
    elsif ( $val eq 'shutdown' ) {
        print "$prefix Virtual machine shutdown.\n";
    }
    return;
}

sub showStatus {
    my $prefix = shift;
    my $val    = shift;
    if ( $val eq SWAMP::HTCondorDefines->Submit ) {
        print "$prefix HT Condor job submitted.\n";
    }
    elsif ( $val eq SWAMP::HTCondorDefines->Execute ) {
        print "$prefix HT Condor job executing.\n";
    }
    elsif ( $val eq SWAMP::HTCondorDefines->Execute ) {
        print "$prefix HT Condor job executing.\n";
    }
    elsif ( $val eq SWAMP::HTCondorDefines->Job_terminated ) {
        print "$prefix HT Condor job terminated.\n";
    }
    return;
}

sub dumpBog {
    my $bogref = shift;
my $tostdout = shift;
	if ($tostdout) {
    print "# Current BOG:\n";
	}
    foreach my $key ( sort keys %{$bogref} ) {
        my $msg = "$key = $bogref->{$key}";
	if ($tostdout) {
		print "$msg\n";
	}
	else {
		$log->info($msg);
	}
    }
    return;
}

#** @function configureClients( )
# @brief Configure XML::RPC clients
#
# @return 0 if clients couldn't be correcly configured, 1 otherwise
#*
sub configureClients {
    my $userhost = shift;
    my $config   = getSwampConfig();
    my $port     = int( $config->get('agentMonitorJobPort') );
    my $host     = $config->get('agentMonitorHost');

    if ( defined($userhost) ) {
        $host = $userhost;
    }
    if ( defined($port) && defined($host) ) {
        SWAMP::Client::AgentClient::configureClient( $host, $port, $PROGRAM_NAME );
    }
    else {
        $log->error("Unable to discern host and port of agentMonitor");
        return 0;
    }
    $port = int( $config->get('agentMonitorPort') );
    if ( defined($port) && defined($host) ) {
        SWAMP::Client::LaunchPadClient::configureClient( $host, $port, $PROGRAM_NAME );
    }
    else {
        $log->error("Unable to discern host and port of agentMonitor");
        return 0;
    }
    $port = int( $config->get('quartermasterPort') );
    $host = $config->get('quartermasterHost');
    if ( defined($port) && defined($host) ) {
        SWAMP::Client::GatorClient::configureClient( $host, $port, $PROGRAM_NAME );
    }
    else {
        $log->error("Unable to discern host and port of agentMonitor");
        return 0;
    }
    return 1;
}

#** @function checkUsage( )
# @brief See how this script was invoked.
#
# @return 0 if the app should exit (nothing more to do), 1 if the app should proceed.
#*
sub checkUsage {
    my %options = (
        'SHOWVERSION'  => 0,
        'LISTPACKAGES' => 0,
        'DUMP'         => 0,
        'LISTTOOLS'    => 0,
        @_,    # actual args overwrite defaults.
    );

    if ( $options{'SHOWVERSION'} ) {
        print "$PROGRAM_NAME: $VERSION\n";
        return 0;
    }
    if ( $options{'LISTPACKAGES'} ) {
        doListPackages( $options{'DUMP'} );
        return 0;
    }
    if ( $options{'LISTTOOLS'} ) {
        doListTools( $options{'DUMP'} );
        return 0;
    }
    if ( $options{'LISTPLATFORMS'} ) {
        doListPlatforms($options{'DUMP'});
        return 0;
    }
    if ( $options{'TOOL'} != -1 && -1 == $options{'PACKAGE'} ) {
        pod2usage('A package needs to be selected with the --package option');
    }
    if ( $options{'PACKAGE'} != -1 && $options{'TOOL'} == -1 ) {
        pod2usage('A tool needs to be selected with the --tool option');
    }
    if ( $options{'PACKAGE'} == -1 && $options{'TOOL'} == -1 ) {
        pod2usage(
'A tool and package need to be selected with the --tool and --package options respectively'
        );
    }
    return 1;
}

sub unmakeKey {
    return split( /,/sxm, shift );
}

sub makeKey {
    my $pkg     = shift;
    my $thetool = shift;
    return "$pkg,$thetool";
}

sub logtag {
    ( my $name = $PROGRAM_NAME ) =~ s/\.pl//sxm;
    return basename($name);
}

sub logfilename {
    ( my $name = $PROGRAM_NAME ) =~ s/\.pl//sxm;
    $name = basename($name);
    return "$basedir/log/${name}.log";
}

sub normalizePackages {
    my $nItems = $packageref->{'rows'};
    foreach my $packageIdx ( 0 .. $#packages ) {
        foreach my $idx ( 1 .. $nItems ) {
            my $fields = getFields( $idx, $packageref );
	next if ($fields->{'version_sharing_status'} =~/private/i);
            if ( $idx eq $packages[$packageIdx] ) {
                $packages[$packageIdx] = trim( $fields->{'name'} );
            }
        }
    }
    return;
}

sub normalizePlatform {
    my $nameref = shift;
    my $platref = shift;
    my $nItems  = $platref->{'rows'};
    foreach my $idx ( 1 .. $nItems ) {
        if ( $idx eq ${$nameref} ) {
            my $fields = getFields( $idx, $platref );
            ${$nameref} = trim( $fields->{'platform_path'} );
        }
    }
    return;
}

sub normalizeTools {
    my $tref   = shift;
    my $nItems = $tref->{'rows'};
    foreach my $toolIdx ( 0 .. $#tools ) {
        foreach my $idx ( 1 .. $nItems ) {
            my $fields = getFields( $idx, $tref );
            if ( $idx eq $tools[$toolIdx] ) {
                ###$tools[$toolIdx] = trim( $fields->{'name'} );
            }
        }
    }
    return;
}

sub makeRunIDs {
    my $packages = shift;
    my $tools    = shift;
    my $runids   = shift;
    my $idx      = 0;
    foreach my $package ( @{$packages} ) {
        foreach my $tool ( @{$tools} ) {
            my $id = "arun.$package.$platformIdx.$tool";
            $runids{ makeKey( $package, $tool ) } = $id;
        }
    }
    return;
}

sub makeBOG {
    my ( $tool, $tref, $package, $pkgref, $desiredplatform ) = @_;
    my $nItems = $tref->{'rows'};
    my $nFound = 0;
    my $toolUUID;
    my $platformUUID;
    my $packageUUID;
    foreach my $idx ( 1 .. $nItems ) {
        my $fields = getFields( $idx, $tref );
        #if ( $idx eq $tool || trim( $fields->{'name'} ) eq $tool ) {
	# Only IDX can be used for tools as of 2.25.14
        if ( $idx eq $tool ) {
            #            $fields->{'invocation_cmd'} =~ s/%/,/gsxm;
            $bog{'toolname'}       = $fields->{'name'};
            ##$bog{'toolpath'}       = $fields->{'tool_path'};
            ##$bog{'toolexecutable'} = $fields->{'tool_executable'};
            ##$bog{'toolarguments'}  = $fields->{'tool_arguments'};
            ##$bog{'tooldirectory'}  = $fields->{'tool_directory'};
            $toolUUID = $fields->{'tool_version_uuid'};
            $nFound++;
        }
    }
    if ( !$nFound ) {
        croak "Cannot find a tool by the name $tool";
    }
    $nItems = $pkgref->{'rows'};
    my %seen;
    $nFound = 0;
    my $name;
    foreach my $idx ( 1 .. $nItems ) {
        my $fields = getFields( $idx, $pkgref );
	next if ($fields->{'version_sharing_status'} =~ /private/i);
        if ( $idx eq $package || basename( $fields->{'package_path'} ) eq $package ) {
	#print "FOUND $fields->{'name'} = $fields->{'package_path'}\n";
            $name = $fields->{'name'};
        }
        if ( defined($name) && basename( $fields->{'package_path'}) eq $package) {
            $fields->{'source_path'} =~ s/'//gsxm;
            ##$fields->{'build_output_path'} =~ s/'//gsxm;
            
##             $bog{'packagesourcepath'}  = $fields->{'source_path'};
##             $bog{'packagebuildfile'}   = $fields->{'build_file'};
##             $bog{'packagebuildtarget'} = $fields->{'build_target'};
##             $bog{'packagebuildtool'}   = $fields->{'build_tool'};
            $bog{'packagename'}        = $fields->{'name'};
##             $bog{'packagepath'}        = $fields->{'package_path'};
            $packageUUID = $fields->{'package_version_uuid'};
	#print "FOUND $packageUUID\n";
            ##if ($doCodeDX) {
             ##   $bog{'codedxurl'} = 'https://viewer.cosalab.org/upload/project/';
            ##}

            $nFound++;
        }
    }
    if ( !$nFound ) {
        croak "Cannot find a package by the name $package";
    }
    my $platref = listPlatforms();
    $nItems = $platref->{'rows'};
    foreach my $idx ( 1 .. $nItems ) {
        my $fields = getFields( $idx, $platref );

        if ( $idx eq $desiredplatform || trim( $fields->{'platform_path'} ) eq $desiredplatform ) {
            $platformUUID = $fields->{'platform_version_uuid'};
            last;
        }
    }
    my %execrecord;
##    $bog{'platform'}      = $desiredplatform;
    $bog{'resultsfolder'} = q{/swamp/working/results/};
##
    my $runKey = makeKey( $package, $tool );
    $execrecord{'execrunid'} = $runids{$runKey};
    $execrecord{'platformid'} = $platformUUID;
    $execrecord{'toolid'} = $toolUUID;
    $execrecord{'packageid'} = $packageUUID;
    my $bogref = getBillOfGoods(\%execrecord);
    foreach my $tempKey (keys %{$bogref}) {
	##print "BillOG: $tempKey => $bogref->{$tempKey}\n";
        $bog{$tempKey} = $bogref->{$tempKey};
    }

##    $bog{'execrunid'} = $runids{$runKey};
##    push @watchedIds, $bog{'execrunid'};
##    if ( defined( $siblings{$runKey} ) ) {
##        $bog{'siblings'} = $siblings{$runKey};
##    }
##
##    if ($toolchain) {
##        $bog{'toolchain'} = $toolchain;
##    }
##    if ($testmode) {
##        $bog{'testmode'} = 1;    # This hook tells agents to not save results
##    }
##    if ($interactive) {
##        $bog{'isinteractive'} = 1;
##    }
    return;
}

END {
    if ( !close(STDOUT) ) {
        carp "Close STDOUT failed $OS_ERROR";
    }
}
__END__
=pod

=encoding utf8

=head1 NAME

arun - Submit an Assessment Run via the command Line 

=head1 SYNOPSIS

arun [--listpackages] [--listtools] --package package --tool tool [--watch] [--out outputfile]

=head1 DESCRIPTION

Use the command arun to perform an assessment run of a named package using a named SWA tool. 

=head1 OPTIONS

=over 8

=item --package B<package>

Provide the name or id of a package to be assessed with B<tool> Multiple --package options can be specified.

=item --tool B<tool>

Provide the name or id of a tool to use during the assessment. Multiple --tool options can be specified.

=item --listpackages 

List the available packages

=item --listtools

List the available tools

=item --watch

Display the events of the assessment run(s) as they occur. If multiple assessment runs are invoked, all will be watched until completion.

=item --out outputfile

Display the events of the assessment run as they occur and save the output to outputfile. Outputfile will be a compress tar file. This option cannot be used if multiple tools or packages are specified.

=item --man

Show this manual page

=item --help 

Show command line options

=back

=head1 EXAMPLES

$ arun --listpackages

$ arun --listtools

$ arun --package Twitter4j --tool PMD
=cut


