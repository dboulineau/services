#!/usr/bin/env perl 

# This file is subject to the terms and conditions defined in
# 'LICENSE.txt', which is part of this source code distribution.
#
# Copyright 2012-2016 Software Assurance Marketplace

#** @file swamp_pkg.pl
#
# @brief
# @author Dave Boulineau (db), dboulineau@continuousassurance.org
# @date 02/26/2014 20:11:30
#*

use 5.014;
use utf8;
use warnings;
use strict;
use FindBin qw($Bin);
use lib ( "$FindBin::Bin/../perl5", "$FindBin::Bin/lib" );

use Getopt::Long qw/GetOptions/;
use Pod::Usage qw/pod2usage/;
use English '-no_match_vars';
use Carp qw(carp croak);
use JSON qw(decode_json);

my $help = 0;
my $verbose=0;
my $man  = 0;
our $VERSION = '0.00';

my $server = q{https://api-dt.cosalab.org/packages/versions} ;
my $user;
my $password;
my %options;
# example package uuid (points to a valid package uuid on dev-test at the time of this writing)
$options{ 'package_uuid'} = q{d10b3412-0633-6007-a473-5e27d971a198};

GetOptions(
    'help|?'   => \$help,
    'man'      => \$man,
    'verbose' => \$verbose,

    'user=s' => \$user,
    'password=s' => \$password,
    'server=s' => \$server,
    'swamp_token=s'             => \$options{'swamp_token'},
    'file=s'                    => \$options{'file'},
    'package_uuid=s'            => \$options{'package_uuid'},
    'version_string=s'          => \$options{'version_string'},
    'comment_public=s'          => \$options{'comment_public'},
    'comment_private=s'         => \$options{'comment_private'},
    'release_date=s'            => \$options{'release_date'},
    'retire_date=s'             => \$options{'retire_date'},
    'package_path=s'            => \$options{'package_path'},
    'source_path=s'             => \$options{'source_path'},
    'bytecode_class_path=s'     => \$options{'bytecode_class_path'},
    'bytecode_aux_class_path=s' => \$options{'bytecode_aux_class_path'},
    'bytecode_source_path=s'    => \$options{'bytecode_source_path'},
    'config_dir=s'              => \$options{'config_dir'},
    'config_cmd=s'              => \$options{'config_cmd'},
    'config_opt=s'              => \$options{'config_opt'},
    'build_file=s'              => \$options{'build_file'},
    'build_system=s'            => \$options{'build_system'},
    'build_target=s'            => \$options{'build_target'},
    'build_dir=s'               => \$options{'build_dir'},
    'build_cmd=s'               => \$options{'build_cmd'},
    'build_opt=s'               => \$options{'build_opt'},
) or pod2usage(2);

if ($help) { pod2usage(1); }
if ($man) { pod2usage( '-verbose' => 2 ); }
if (!defined($options{'file'})) { pod2usage( '-verbose' => 2 ); }
if (!defined($options{'swamp_token'})) {
    if (!defined($user) || !defined($password)) {
        $options{'swamp_token'} = `perl swamp_auth -n`;    
    }
    else {
        $options{'swamp_token'} = `perl swamp_auth --user $user --password $password`;    
    }
    chomp $options{'swamp_token'};
    if ($verbose) {
        print "TOKEN: [$options{'swamp_token'}]\n";
    }
    if ($options{'swamp_token'} =~ /Incorrect/sxm) {
        die "Unable to authenticate with $server: $options{'swamp_token'}"; 
    }
}
my $cmd = 'curl -s -X POST';
foreach my $key (keys %options) {
    if ($options{$key}) {
        if ($key eq 'file') {
            $cmd .= " -F '$key=\@$options{$key}'";
        }
        else {
            $cmd .= " -F '$key=$options{$key}'";
        }
    }
}
$cmd .= " $server";
my $res=qx{$cmd};
if ($verbose) { 
    print "       command: $cmd\n";
    print "command result: $res\n";
}
my $json = decode_json($res);
if ($verbose) {
    print "JSON result: [$json->{'success'}] : $json->{'message'}\n";
}
my $ok = lc($json->{'success'}) eq 'true';

exit !$ok;
__END__
=pod

=encoding utf8

=head1 NAME

swamp_pkg - Upload a new version of an existing package to the SWAMP.

=head1 SYNOPSIS

swamp_pkg 
--swamp_token token
--file filename
--package_uuid uuid
[--version_string string]
[--comment_public "comment string"]
[--comment_private "private comment string"]
[--release_date date]
[--retire_date date]
[--package_path path_to_package]
[--source_path source_path]
[--bytecode_class_path classpath]
[--bytecode_aux_class_path classpath]
[--bytecode_source_path classpath]
[--config_dir directory]
[--config_cmd configure_command]
[--config_opt configure_options]
[--build_file file]
[--build_system build system]
[--build_target target]
[--build_dir directory]
[--build_cmd build_command]
[--build_opt build_options]

=head1 DESCRIPTION

swamp_pkg is a command line client of the SWAMP API server. It can be used to upload a new version of an existing SWAMP package.

=head1 OPTIONS

=over 8

=item --swamp_token I<token>

the token to be used for this request. Token is generated by B<swamp_auth>

=item --file I<file>

the archive file containing the package 

=item --package_uuid I<uuid>

the package to which the version belongs

=item --version_string I<string>

the name of the package version

=item --comment_public I<public comment>

The public description of the package version. Should be quoted if more than a single word.

=item --comment_private I<private comment>

The private description of the package version. Should be quoted if more than a single word.

=item --release_date I<date>

the release date of the package

=item --retire_date I<date>

the retire date of the version

=item --package_path i<path>

the path to locate the package in the decompressed contents

=item --source_path I<path>

the path to the source files within the package

=item --bytecode_class_path I<classpath>

the path to locate java bytecode classes

=item --bytecode_aux_class_path I<classpath>

auxiliary path to locate java bytecode classes

=item --bytecode_source_path I<classpath>

the path to locate bytecode source files

=item --config_dir I<directory>

Directory in which to run configure command. 

=item --config_cmd I<command>

config command 

=item --config_opt I<command options>

config options

=item --build_file I<file>

the file containing the build instructions (e.g. Makefile)

=item --build_system I<name of build system>

the build system

=item --build_target I<name of build target>

the build target

=item --build_dir I<directory>

the build directory

=item --build_cmd I<build command>

the build command to use if build system is 'other'

=item --build_opt I<build options>

any build options

=item --man

Show manual page for this script

=back

=head1 EXAMPLES

swamp_pkg --file cppexample.tar.gz --comment_public "My upload from API" --version_string H --build_system make --build_target Makefile

=head1 SEE ALSO

L<swamp_auth|swamp_auth>

=cut


